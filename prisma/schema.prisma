generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  emails        Email[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}


model Account {
  id                        String   @id @default(cuid())
  userId                    String
  type                      String
  provider                  String
  providerAccountId         String
  refresh_token             String?  // Stored if available from email provider
  access_token              String?
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String?
  session_state             String?
  refresh_token_expires_in  Int?

  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Email {
  id         String    @id @default(cuid())
  userId     String
  threadId   String
  subject    String?
  body       String?
  from       String
  to         String[]
  cc         String[]
  bcc        String[]
  date       DateTime
  isRead     Boolean   @default(false)
  folder     String?   // e.g., inbox, sent, drafts
  labels     String[]  // For Gmail-style labels
  user       User      @relation(fields: [userId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([threadId])
}
